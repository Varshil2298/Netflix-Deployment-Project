stages:
  - test
  - build
#  - deploy

.prepare_nodejs_environment:
  image: node:18-alpine
  cache:
    policy: pull-push
    when: on_success
    paths:
      - node_modules
    key:
      files:
        - package.json
      prefix: node_modules
  before_script:
   - npm install --legacy-peer-deps
   - npm install jest@27 @testing-library/jest-dom@5 @testing-library/react @types/jest@27 ts-jest@27 --save-dev
   - npm install --save-dev @testing-library/jest-dom
   - npm install --save-dev typescript ts-jest

# unit_testing:
#   stage: test
#   extends: .prepare_nodejs_environment
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'  
#   script:
#     - npm test
#   artifacts:
#     when: always
#     expire_in: 3 days
#     name: Netflix-Test-Result
#     paths:
#       - src/__tests__/test-results.xml   
#     reports:
#       junit: src/__tests__/test-results.xml

code_coverage:
   stage: test
   extends: .prepare_nodejs_environment
 #  rules:
 #    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
   script:
     - npm run coverage
   artifacts:
     name: Code-Coverage-Result
     when: always
     reports:
       coverage_report:
         coverage_format: cobertura
         path: coverage/cobertura-coverage.xml
   coverage: '/Statements\s+:\s+([\d.]+%)/'
  # allow_failure: true


docker_build:
  stage: build
  image: 
    name: docker:latest
  services:
    - docker:19-dind
  before_script:
    - apk add --no-cache curl jq python3 py3-pip
    - python3 -m venv /tmp/venv
    - source /tmp/venv/bin/activate
    - pip install awscli
    - aws ecr get-login-password | docker login --username AWS --password-stdin $DOCKER_REGISTRY
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'  
 #   - aws --version
  #  - docker info
 #   - docker --version
   # - wget https://github.com/aquasecurity/trivy/releases/download/v0.44.0/trivy_0.44.0_Linux-64bit.tar.gz
  #  - tar zxvf trivy_0.44.0_Linux-64bit.tar.gz
  #  - mv trivy /usr/local/bin/
  #  - trivy --version
  script:
    - docker build -t $APP_NAME:$CI_PIPELINE_IID --build-arg TMDB_V3_API_KEY=$API_KEY --build-arg API_ENDPOINT_URL=$API_ENDPOINT . 
    - docker tag $APP_NAME:$CI_PIPELINE_IID $DOCKER_REGISTRY/$APP_NAME:$CI_PIPELINE_IID
    # - docker build -t netflix:latest â€” build-arg TMDB_V3_API_KEY=your_api_key .
   # - trivy image --severity HIGH,CRITICAL --format json --output trivy_report.json $DOCKER_REGISTRY/$APP_NAME:$CI_PIPELINE_IID
   # - cat trivy_report.json
    - docker push $DOCKER_REGISTRY/$APP_NAME:$CI_PIPELINE_IID
    - echo "$DOCKER_REGISTRY/$APP_NAME:$CI_PIPELINE_IID" > image_uri.txt
  artifacts:
    paths:
      - image_uri.txt  
 
deploy_to_kubernetes:
  stage: deploy
  image: 
    name: docker:latest
    entrypoint: [""]  
  before_script:
    - apk add --no-cache curl jq python3 py3-pip
    - python3 -m venv /tmp/venv
    - source /tmp/venv/bin/activate
    - pip install awscli
    - aws ecr get-login-password | docker login --username AWS --password-stdin $DOCKER_REGISTRY
    - export KUBECONFIG=$DEV_KUBE_CONFIG
    - curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.19.6/2021-01-05/bin/linux/amd64/kubectl
    - chmod +x ./kubectl
    - mv ./kubectl /usr/local/bin/kubectl
    - kubectl version --short --client
    - apk add --no-cache gettext
    - kubectl config get-contexts
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'  
  dependencies:
    - docker_build  
  script:
    - kubectl get nodes
    # Replace the ${K8S_IMAGE} placeholder with the actual image URI in deployment.yaml
    - export IMAGE_URI=$(cat image_uri.txt)
    - sed -i "s|\${K8S_IMAGE}|$IMAGE_URI|g" Kubernetes/deployment.yaml
    # Apply the updated deployment.yaml to the Kubernetes cluster
    - kubectl -n $KUBERNETES_NAMESPACE apply -f Kubernetes/deployment.yaml
    # Apply the service.yaml to the Kubernetes cluster
    - kubectl -n $KUBERNETES_NAMESPACE apply -f Kubernetes/service.yaml
    # Apply the ingress.yaml to the Kubernetes cluster
    - kubectl -n $KUBERNETES_NAMESPACE apply -f Kubernetes/ingress.yaml    